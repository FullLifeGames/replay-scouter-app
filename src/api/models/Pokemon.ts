/* tslint:disable */
/* eslint-disable */
/**
 * Showdown Replay Scouter
 * This is the Showdown Replay Scouter API. <a href=\'https://github.com/FullLifeGames/Showdown-Replay-Scouter\'>This is the code.</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { StatsTable } from '@pkmn/sim';
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Pokemon
 */
export interface Pokemon {
    /**
     * 
     * @type {string}
     * @memberof Pokemon
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pokemon
     */
    formName?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pokemon
     */
    altNames?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Pokemon
     */
    ability?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pokemon
     */
    item?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pokemon
     */
    teraType?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Pokemon
     */
    lead?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pokemon
     */
    moves?: Array<string>;
    /**
     * 
     * @type {StatsTable}
     * @memberof Pokemon
     */
    evs?: StatsTable;
    /**
     * 
     * @type {StatsTable}
     * @memberof Pokemon
     */
    ivs?: StatsTable;
    /**
     * 
     * @type {string}
     * @memberof Pokemon
     */
    nature?: string;
}

/**
 * Check if a given object implements the Pokemon interface.
 */
export function instanceOfPokemon(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PokemonFromJSON(json: any): Pokemon {
    return PokemonFromJSONTyped(json, false);
}

export function PokemonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pokemon {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'formName': !exists(json, 'formName') ? undefined : json['formName'],
        'altNames': !exists(json, 'altNames') ? undefined : json['altNames'],
        'ability': !exists(json, 'ability') ? undefined : json['ability'],
        'item': !exists(json, 'item') ? undefined : json['item'],
        'teraType': !exists(json, 'teraType') ? undefined : json['teraType'],
        'lead': !exists(json, 'lead') ? undefined : json['lead'],
        'moves': !exists(json, 'moves') ? undefined : json['moves'],
    };
}

export function PokemonToJSON(value?: Pokemon | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'formName': value.formName,
        'altNames': value.altNames,
        'ability': value.ability,
        'item': value.item,
        'teraType': value.teraType,
        'lead': value.lead,
        'moves': value.moves,
    };
}

