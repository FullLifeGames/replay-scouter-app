/* tslint:disable */
/* eslint-disable */
/**
 * Showdown Replay Scouter
 * This is the Showdown Replay Scouter API. <a href=\'https://github.com/FullLifeGames/Showdown-Replay-Scouter\'>This is the code.</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OutputObject } from './OutputObject';
import {
    OutputObjectFromJSON,
    OutputObjectFromJSONTyped,
    OutputObjectToJSON,
} from './OutputObject';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';

/**
 * 
 * @export
 * @interface ApiScoutingResult
 */
export interface ApiScoutingResult {
    /**
     * 
     * @type {Array<Team>}
     * @memberof ApiScoutingResult
     */
    teams?: Array<Team>;
    /**
     * 
     * @type {OutputObject}
     * @memberof ApiScoutingResult
     */
    outputs?: OutputObject | null;
}

/**
 * Check if a given object implements the ApiScoutingResult interface.
 */
export function instanceOfApiScoutingResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApiScoutingResultFromJSON(json: any): ApiScoutingResult {
    return ApiScoutingResultFromJSONTyped(json, false);
}

export function ApiScoutingResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiScoutingResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'teams': !exists(json, 'teams') ? undefined : ((json['teams'] as Array<any>).map(TeamFromJSON)),
        'outputs': !exists(json, 'outputs') ? undefined : OutputObjectFromJSON(json['outputs']),
    };
}

export function ApiScoutingResultToJSON(value?: ApiScoutingResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'teams': value.teams === undefined ? undefined : ((value.teams as Array<any>).map(TeamToJSON)),
        'outputs': OutputObjectToJSON(value.outputs),
    };
}

