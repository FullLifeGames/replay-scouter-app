/* tslint:disable */
/* eslint-disable */
/**
 * Showdown Replay Scouter
 * This is the Showdown Replay Scouter API. <a href=\'https://github.com/FullLifeGames/Showdown-Replay-Scouter\'>This is the code.</a>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Pokemon } from './Pokemon';
import {
    PokemonFromJSON,
    PokemonFromJSONTyped,
    PokemonToJSON,
} from './Pokemon';
import type { Replay } from './Replay';
import {
    ReplayFromJSON,
    ReplayFromJSONTyped,
    ReplayToJSON,
} from './Replay';

/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {boolean}
     * @memberof Team
     */
    complete?: boolean;
    /**
     * 
     * @type {Array<Replay>}
     * @memberof Team
     */
    replays?: Array<Replay>;
    /**
     * 
     * @type {Array<Pokemon>}
     * @memberof Team
     */
    pokemon?: Array<Pokemon>;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    format?: string | null;
}

/**
 * Check if a given object implements the Team interface.
 */
export function instanceOfTeam(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamFromJSON(json: any): Team {
    return TeamFromJSONTyped(json, false);
}

export function TeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Team {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'replays': !exists(json, 'replays') ? undefined : ((json['replays'] as Array<any>).map(ReplayFromJSON)),
        'pokemon': !exists(json, 'pokemon') ? undefined : ((json['pokemon'] as Array<any>).map(PokemonFromJSON)),
        'format': !exists(json, 'format') ? undefined : json['format'],
    };
}

export function TeamToJSON(value?: Team | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'replays': value.replays === undefined ? undefined : ((value.replays as Array<any>).map(ReplayToJSON)),
        'pokemon': value.pokemon === undefined ? undefined : ((value.pokemon as Array<any>).map(PokemonToJSON)),
        'format': value.format,
    };
}

